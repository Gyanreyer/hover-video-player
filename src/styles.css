:host {
  display: inline-block;
  position: relative;
  --overlay-transition-duration: 0.4s;
  --loading-timeout-duration: 0.2s;
}

:host([sizing-mode="video"]) ::slotted(video) {
  display: block;
  width: 100%;
}

:host([sizing-mode="overlay"]) ::slotted([slot="paused-overlay"]) {
  position: relative;
}

:host(:is([sizing-mode="overlay"], [sizing-mode="container"]))
  ::slotted(video) {
  object-fit: cover;
}

/* Style videos and overlays to cover the container depending on the sizing mode */
/* The video element should expand to cover the container in all but the "video" sizing mode */
:host(:is([sizing-mode="overlay"], [sizing-mode="container"])) ::slotted(video),
/* The paused overlay should expand to cover the container in all but the "overlay" sizing mode */
:host(:is([sizing-mode="video"], [sizing-mode="container"])) ::slotted([slot="paused-overlay"]),
/* The loading and hover overlays should always expand to cover the container */
::slotted(:is([slot="loading-overlay"], [slot="hover-overlay"])) {
  position: absolute;
  inset: 0;
}

::slotted(:is([slot="paused-overlay"], [slot="loading-overlay"], [slot="hover-overlay"])) {
  display: block;
  opacity: 0;
  visibility: hidden;
  --transition-delay: 0s;
  --visibility-transition-delay: var(--overlay-transition-duration);
  transition: opacity var(--overlay-transition-duration) var(--transition-delay),
    visibility 0s
      calc(var(--transition-delay) + var(--visibility-transition-delay));
}

::slotted([slot="paused-overlay"]) {
  z-index: 1;
}

::slotted([slot="loading-overlay"]) {
  z-index: 2;
}

::slotted([slot="hover-overlay"]) {
  z-index: 3;
}

/* Fade in overlays for their appropriate playback states */
:host(:is([data-playback-state="paused"], [data-playback-state="loading"]))
  ::slotted([slot="paused-overlay"]),
:host([data-playback-state="loading"]) ::slotted([slot="loading-overlay"]),
:host([data-is-hovering]) ::slotted([slot="hover-overlay"]) {
  opacity: 1;
  visibility: visible;
  --visibility-transition-delay: 0s;
}

:host([data-playback-state="loading"]) ::slotted([slot="loading-overlay"]) {
  /* Delay the loading overlay fading in */
  --transition-delay: var(--loading-timeout-duration);
}
